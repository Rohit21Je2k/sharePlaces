{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UsersPlaces.js"],"names":["Card","props","className","style","children","Map","src","title","address","width","height","PlaceItem","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmMOdal","useHttpClient","isLoading","error","sendRequest","clearError","closeMapHandler","cancelDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","contentClass","footerClass","footer","Button","onClick","inverse","danger","LoadingSpinner","asOverlay","image","alt","description","userId","creatorId","to","PlaceList","items","length","map","place","creator","coordinates","location","onDeletePlace","UsersPlaces","useParams","loadedPlaces","setLoadedPlaces","useEffect","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/6.cef068df.chunk.js","sourcesContent":["import './Card.css';\n\nfunction Card(props) {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import \"./Map.css\";\r\n\r\nfunction Map(props) {\r\n  return (\r\n    <div className={`map ${props.className}`} style={props.style}>\r\n      <iframe\r\n        src={`https://www.google.com/maps?q=${props.title} ${props.address}&output=embed`}\r\n        title=\"location\"\r\n        width=\"100%\"\r\n        height=\"250\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Map from \"../../shared/components/UIElements/Map\";\r\nimport { AuthContext } from \"../../shared/Context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/components/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nimport \"./PlaceItem.css\";\r\n\r\nfunction PlaceItem(props) {\r\n  const auth = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmMOdal] = useState(false);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  function openMapHandler() {\r\n    setShowMap(true);\r\n  }\r\n  function closeMapHandler() {\r\n    setShowMap(false);\r\n  }\r\n\r\n  function showDeleteWarningHandler() {\r\n    setShowConfirmMOdal(true);\r\n  }\r\n  function cancelDeleteHandler() {\r\n    setShowConfirmMOdal(false);\r\n  }\r\n\r\n  async function confirmDeleteHandle() {\r\n    setShowConfirmMOdal(false);\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/${props.id}`,\r\n        \"DELETE\",\r\n        null,\r\n        { Authorization: \"Bearer \" + auth.token }\r\n      );\r\n      props.onDelete(props.id);\r\n    } catch (err) {}\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n\r\n      <Modal\r\n        show={showMap}\r\n        onCancel={closeMapHandler}\r\n        header={props.address}\r\n        contentClass=\"place-item__modal-content\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n      >\r\n        <div className=\"map-container\">\r\n          <Map title={props.title} address={props.address} />\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Are you Sure ?\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandle}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <p>\r\n          Do you want to proceed and delete this place ? please note that it\r\n          cant be undone thereafter.\r\n        </p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place-item__image\">\r\n            <img\r\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\r\n              alt={props.title}\r\n            />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick={openMapHandler}>\r\n              View on Map\r\n            </Button>\r\n            {auth.userId === props.creatorId && (\r\n              <React.Fragment>\r\n                <Button to={`/places/${props.id}`}>Edit</Button>\r\n                <Button danger onClick={showDeleteWarningHandler}>\r\n                  Delete\r\n                </Button>\r\n              </React.Fragment>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default PlaceItem;\r\n","import Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport PlaceItem from \"./PlaceItem\";\r\n\r\nimport \"./PlaceList.css\";\r\n\r\nfunction PlaceList(props) {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No places found. Maybe create one?</h2>\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ul className=\"place-list\">\r\n      {props.items.map((place) => {\r\n        return (\r\n          <PlaceItem\r\n            key={place.id}\r\n            id={place.id}\r\n            image={place.image}\r\n            title={place.title}\r\n            description={place.description}\r\n            address={place.address}\r\n            creatorId={place.creator}\r\n            coordinates={place.location}\r\n            onDelete={props.onDeletePlace}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default PlaceList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport { useHttpClient } from \"../../shared/components/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nfunction UsersPlaces() {\r\n  const userId = useParams().userId;\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    async function fetchPlaces() {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\r\n        );\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    }\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  function placeDeleteHandler(deletedPlaceId) {\r\n    setLoadedPlaces((prevPlaces) =>\r\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\r\n    );\r\n  }\r\n \r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n        <LoadingSpinner asOverlay />\r\n      </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && (\r\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UsersPlaces;\r\n"],"sourceRoot":""}